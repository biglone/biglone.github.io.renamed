<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>暴龙哥的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-17T03:46:42.577Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Biglone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018-10-16-Diary</title>
    <link href="http://yoursite.com/2018/10/17/2018-10-16-Diary/"/>
    <id>http://yoursite.com/2018/10/17/2018-10-16-Diary/</id>
    <published>2018-10-17T00:46:34.000Z</published>
    <updated>2018-10-17T03:46:42.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日课"><a href="#日课" class="headerlink" title="日课"></a>日课</h1><p>1、吉他练习<br>时长：20分钟<br>内容：爬格子、熟练度。</p><p>总结：太过放纵自己，空闲时间少看YouTube，控制自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日课&quot;&gt;&lt;a href=&quot;#日课&quot; class=&quot;headerlink&quot; title=&quot;日课&quot;&gt;&lt;/a&gt;日课&lt;/h1&gt;&lt;p&gt;1、吉他练习&lt;br&gt;时长：20分钟&lt;br&gt;内容：爬格子、熟练度。&lt;/p&gt;
&lt;p&gt;总结：太过放纵自己，空闲时间少看YouTube，控制自己。&lt;
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-10-16Diary</title>
    <link href="http://yoursite.com/2018/10/16/2018-10-16Diary/"/>
    <id>http://yoursite.com/2018/10/16/2018-10-16Diary/</id>
    <published>2018-10-16T00:38:11.000Z</published>
    <updated>2018-10-16T01:02:46.165Z</updated>
    
    <content type="html"><![CDATA[<p>#日课</p><p>《Git版本控制管理（第二版）》<br>时长：一个半小时<br>内容：<br>合并分支<br>分支合并的<br>git merge操作是区分上下文的，当前分支始终是目标分支，其他一个或多个分支始终合并到当前分支。</p><p>有冲突的合并：<br>.git/MERGE_HEAD 包含合并进来的提交的SHA1值。不必自己使用SHA1;任何时候提到MERGE_HEAD,Git都知道去查看那个文件。</p><p>.git/MERGE_MSG 包含当解决冲突后执行git commit命令时用到的默认合并消息。</p><p>Git的索引包含每个冲突文件的三个副本：合并基础、“我们的” 版本和“他 们的”版本。给这三个副本分配了各自的编号1、2、3。<br>查看索引项的存储，可以使用git ls-files底层命令。</p><p>冲突的版本（合并标记和所有内容）不存储在索引中。相反，它始终存储在工作目录中的文件里。当执行不带任何参数的git diff命令时，始终比较索引与工作目录中的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#日课&lt;/p&gt;
&lt;p&gt;《Git版本控制管理（第二版）》&lt;br&gt;时长：一个半小时&lt;br&gt;内容：&lt;br&gt;合并分支&lt;br&gt;分支合并的&lt;br&gt;git merge操作是区分上下文的，当前分支始终是目标分支，其他一个或多个分支始终合并到当前分支。&lt;/p&gt;
&lt;p&gt;有冲突的合并：&lt;br&gt;.
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-10-12Diary</title>
    <link href="http://yoursite.com/2018/10/12/2018-10-12Diary/"/>
    <id>http://yoursite.com/2018/10/12/2018-10-12Diary/</id>
    <published>2018-10-12T00:25:27.000Z</published>
    <updated>2018-10-12T02:20:13.892Z</updated>
    
    <content type="html"><![CDATA[<p>#日课</p><ol><li><p>吉他<br>时长：20分钟<br>内容：五线谱知识<br>总结：时间花得太少。</p></li><li><p>《Git》<br>时长：一个小时<br>内容：<br>git diff</p></li></ol><p>Git可以遍历两个树对象，同时显示它们的差别。</p><p>有三个可供树或类树对象使用git diff命令的基本来源：</p><ul><li>整个提交图中的任意树对象；</li><li>工作目录；</li><li>索引</li></ul><p>git diff命令可以使用上述三种来源的组合来进行如下4中基本比较。</p><p>① git diff<br>显示工作目录和索引之间的差异。同时它会显示工作目录里什么是“脏数据”。这条命令不会显示索引中的和永久存在版本库中的文件的不同。</p><p>② git diff commit<br>这个形式命令会显示工作目录和给定提交间的差异。</p><p>③ git diff –cached commit<br>这条命令会显示索引中的变更和给定提交中的变更之间的差异。如果省略commit这一项，则默认为HEAD。</p><p>④ git diff commit1 commit2<br>这条命令会显示任意两个提交之间的差异。</p><p>请记住，git commit捕获索引中出现的状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#日课&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;吉他&lt;br&gt;时长：20分钟&lt;br&gt;内容：五线谱知识&lt;br&gt;总结：时间花得太少。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《Git》&lt;br&gt;时长：一个小时&lt;br&gt;内容：&lt;br&gt;git diff&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Git可以
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-10-11Diary</title>
    <link href="http://yoursite.com/2018/10/11/2018-10-11Diary/"/>
    <id>http://yoursite.com/2018/10/11/2018-10-11Diary/</id>
    <published>2018-10-11T00:20:32.000Z</published>
    <updated>2018-10-11T07:34:43.518Z</updated>
    
    <content type="html"><![CDATA[<p>#日课<br>1.吉他练习<br>半小时+<br>明日将C大调的两种音阶标注音阶名称。</p><ol start="2"><li>《Git》<br>一小时+<br>内容：检出分支。<br>①有未提交（有变更但是变更既没有add也没有commit）的更改时进行检出会提示失败。<br>②合并变更到不同分支：<br>当想要将当前分支的修改合并到待检出的其他分支上时可以使用下面的命令： <pre><code>git checkout -m dev</code></pre></li></ol><p>注意：本次的合并操作完全发生在工作目录中，本地的修改与目标分支合并，并留在工作目录中？（这里需要实际测试一下）</p><p>③创建并检出新分支：</p><pre><code>git branchgit checkout -b bug/pr-3git show-branch</code></pre><p>将当前工作目录的修改直接作加入到新分支。</p><p>④分离HEAD分支</p><p>当试图检出提交时Git会创建一种匿名分支，称为一个分离的HEAD（detached HEAD）有下面几种情况，Git会创建一个分离的HEAD。</p><ul><li>检出的提交不是分支的头部。</li><li>检出一个追踪分支。</li><li>检出标签引用的提交。</li><li>启动一个git bisect。</li><li>使用 git submodule update命令。</li></ul><p>如果想要将分离HEAD保留，那么需要创建一个新分支：</p><pre><code>git checkout -d new_branch</code></pre>放弃该分离HEAD则可以直接切换至命名分支。<pre><code>git checkout master</code></pre><p>⑤删除分支</p><pre><code>git branch -d branch</code></pre><p>Git会阻止删除当前分支，因为删除当前分支会导致Git无法确定工作目录树在删除之后是一个什么状态。<br>同时Git也不会让你轻易删除一个包含不存在于当前分支中的提交的分支，也就是说待删除分支不是当前HEAD的祖先、该分支的开发线没有贡献给当前分支的开发。</p><p>Git不会保存任何形式的关于分支名创建、移动、操纵、合并或删除的历史记录。一旦某个分支名删除了，它就没有了。</p><p>然而，该分支上的提交历史记录是一个独立的问题。Git最终会删除那些不再引用的提交和不能从某些命名的引用可达的提交。如果想保留那些提交，必须将它们合并到不同的分支，或者用标签指向它们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#日课&lt;br&gt;1.吉他练习&lt;br&gt;半小时+&lt;br&gt;明日将C大调的两种音阶标注音阶名称。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;《Git》&lt;br&gt;一小时+&lt;br&gt;内容：检出分支。&lt;br&gt;①有未提交（有变更但是变更既没有add也没有commit）的更改时进行检出会提示失
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-10-10Diary</title>
    <link href="http://yoursite.com/2018/10/10/2018-10-10Diary/"/>
    <id>http://yoursite.com/2018/10/10/2018-10-10Diary/</id>
    <published>2018-10-10T00:52:27.000Z</published>
    <updated>2018-10-10T01:25:39.792Z</updated>
    
    <content type="html"><![CDATA[<p>#日课</p><p>1.吉他练习<br>时长：一小时<br>内容：爬格子，《菊花台》片段、《我真的受伤了》片段</p><p>效果：熟练度提升<br>评价：C大调，第二种的音名未标注。需要学习五线谱的相关知识。</p><ol start="2"><li>《Qt》<br>时长：一小时<br>内容：QThread，多线程编程</li></ol><p>效果：信号量的部分能够理解，但是涉及到Mutex的部分不太理解（QWaitCondition配合QMutex的使用），QConurrent的使用也不太了解其使用方法及使用情形。</p><ol start="3"><li>《Git权威指南》<br>时长：半个小时+<br>内容：Git 提交范围的相关内容。</li></ol><p>效果：范围：用commit1..commit2,“有尾无首”，in end but not in start.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#日课&lt;/p&gt;
&lt;p&gt;1.吉他练习&lt;br&gt;时长：一小时&lt;br&gt;内容：爬格子，《菊花台》片段、《我真的受伤了》片段&lt;/p&gt;
&lt;p&gt;效果：熟练度提升&lt;br&gt;评价：C大调，第二种的音名未标注。需要学习五线谱的相关知识。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;《Qt》&lt;br
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-10-08Diary</title>
    <link href="http://yoursite.com/2018/10/09/2018-10-08Diary/"/>
    <id>http://yoursite.com/2018/10/09/2018-10-08Diary/</id>
    <published>2018-10-09T00:10:31.000Z</published>
    <updated>2018-10-17T03:46:10.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日课"><a href="#日课" class="headerlink" title="日课"></a>日课</h2><ol><li>吉他练习。<br>时长：一小时+<br>内容：爬格子，《我真的受伤了》片段。</li></ol><p>效果：熟练度提升。</p><ol start="2"><li>《Git权威指南》<br>时长：一小时-<br>内容：相对提交名，提交图。</li></ol><p>效果：印象不深，期间有间断，与人聊微信，明日集中精力和时间来学习。</p><ol start="3"><li>《Qt》<br>时长：30分钟。<br>内容：关于多线程编程。</li></ol><p>效果：效果不佳，心思不集中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日课&quot;&gt;&lt;a href=&quot;#日课&quot; class=&quot;headerlink&quot; title=&quot;日课&quot;&gt;&lt;/a&gt;日课&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;吉他练习。&lt;br&gt;时长：一小时+&lt;br&gt;内容：爬格子，《我真的受伤了》片段。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;效果：熟练度提升。&lt;/
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-09-28-Diary</title>
    <link href="http://yoursite.com/2018/09/29/2018-09-28-Diary/"/>
    <id>http://yoursite.com/2018/09/29/2018-09-28-Diary/</id>
    <published>2018-09-28T23:51:19.000Z</published>
    <updated>2018-09-29T06:54:35.280Z</updated>
    
    <content type="html"><![CDATA[<p>日课：<br>1、学习五线谱，花30分钟练习吉他。</p><p>2、阅读《Git权威指南》共计一小时。</p><p>3、 阅读《SQLite权威指南》 一个小时。</p><p>共计3小时。</p><hr><p>日课总结：</p><ol start="2"><li>阅读《SQLite权威指南》<br>存储类：integer、real、text、blob、NULL。<br>排序则按照:NULL &lt; integer &lt; real &lt; text &lt; blob.</li></ol><p>视图即虚拟表，也称为派生表，因为它们的内容都派生自其它表的查询结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日课：&lt;br&gt;1、学习五线谱，花30分钟练习吉他。&lt;/p&gt;
&lt;p&gt;2、阅读《Git权威指南》共计一小时。&lt;/p&gt;
&lt;p&gt;3、 阅读《SQLite权威指南》 一个小时。&lt;/p&gt;
&lt;p&gt;共计3小时。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;日课总结：&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-09-27Diary</title>
    <link href="http://yoursite.com/2018/09/27/2018-09-27Diary/"/>
    <id>http://yoursite.com/2018/09/27/2018-09-27Diary/</id>
    <published>2018-09-27T00:43:19.000Z</published>
    <updated>2018-09-28T00:31:52.041Z</updated>
    
    <content type="html"><![CDATA[<p>日课：<br>1、学习五线谱，花30分钟练习吉他。</p><p>2、阅读《Git权威指南》共计一小时。</p><p>3、 阅读《SQLite权威指南》 一个小时。</p><p>共计3小时。</p><p>今日晚饭吃的过多，导致肚子撑，读书难于集中精神，明日可将米饭减半。</p><p>总体完成度 70%， 加油。</p><hr><p>内容回顾：<br>关于阅读《SQLite权威指南》的学习内容主要是数据完整性这一块内容。<br>数据完整性包括：域完整性、实体完整性、引用完整性和用户定义完整性。<br>域完整性涉及控制字段的值；实体完整性涉及表的；引用完整性涉及表之间的行，具体讲就是外键关系；用户定义完整性则包罗万象。</p><p>实体完整性：说白了就是为了保证区分行与行的唯一性，而这种唯一性往往通过主键来保证。当定义一个表的时候总是需要确定一个主键，而SQLite提供了一个名为rowid的64-bit整形字段，并且该字段具有自动增长特性。<br>在自动增长的过程中，rowid有可能被回收使用，如果想确保不被回收，则需要在 integer primary key后加上 autoincrement。</p><p>域完整性：域处理两件事情：类型和范围，因此域完整性则包含两部分：类型检查和范围检查。本章暂不介绍类型检查，只介绍了范围检查：默认值、NOT NULL、check外键约束。</p><p>阅读《Git权威指南》<br>阅读了第四章的第一小节，该部分内容主要是介绍Git的基本概念。<br>所谓的Git版本库（repository）只是一个简单的数据库，其中包括所有用来维护与管理项目的修订版本和历史信息。<br>克隆操作（clone）是不会将配置设置信息转移的。<br>Git维护的主要数据结构有两个：<strong>对象库（object store）和索引（index）</strong><br>对象库是Git版本库实现的心脏。它包含<strong>原始数据文件、所有日志消息、作者信息、日期、用来创建项目任意版本或分支的信息</strong></p><p>Git放在对象库里的对象只有4中类型：<strong>块（blob）、目录树（tree）、提交（commit）、和标签（tag）</strong>。这4中原子对象构成了Git高层数据结构的基础。</p><p>块（blob）文件的每一个版本表示一个blob。blob(binary large object)保存的是文件数据，但不包含任何关于这个文件的元数据。</p><p>目录树（tree）一个目录树（tree）对象代表一层目录信息。它记录blob标识符（？？？）、路径名和在一个目录的所有文件的一些元数据。</p><p>提交（commit）提交对象保存版本库每次变化的元数据，包括作者、提交者、提交日期和日志消息。每一个提交对象指向一个目录树对象。</p><p>标签（tag）一个标签对象分配一个任意的且人类可读的名字给一个特定对象，通常是一个提交对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日课：&lt;br&gt;1、学习五线谱，花30分钟练习吉他。&lt;/p&gt;
&lt;p&gt;2、阅读《Git权威指南》共计一小时。&lt;/p&gt;
&lt;p&gt;3、 阅读《SQLite权威指南》 一个小时。&lt;/p&gt;
&lt;p&gt;共计3小时。&lt;/p&gt;
&lt;p&gt;今日晚饭吃的过多，导致肚子撑，读书难于集中精神，明日可将米饭减半
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2018-09-26Diary</title>
    <link href="http://yoursite.com/2018/09/26/2018-09-26Diary/"/>
    <id>http://yoursite.com/2018/09/26/2018-09-26Diary/</id>
    <published>2018-09-26T00:58:42.000Z</published>
    <updated>2018-09-27T00:25:56.825Z</updated>
    
    <content type="html"><![CDATA[<p>#昨日种种譬如昨日死，从后种种譬如今日生。</p><p>今日读《曾国藩的正面与侧面2》有感，对其弟的包容与关爱超出常人，曾国荃率性冲动的性格多次犯错，曾国藩总是一边批评指出其错误，一边又宽慰让其不必过于郁郁而伤身，正如曾国藩给曾国荃引用袁了凡的那句话：昨日种种譬如昨日死，从后种种譬如今日生。大丈夫如何能够整日低眉顺目，碌碌无为，立志吧。</p><p>我该立怎样的志呢？目前沒个方向，沒个思路，参看横渠四句，大概求一个低标准来要求自己，放在当下莫过于，做一个正直的人，踏实的人，有益于亲友、有益于社会、有益于国家的人。</p><p>目前我自身的能力真真做不到有益于社会、国家甚至于益于亲友也难做到。先完善自我，日日提高自我，日日进步，才能有所作为，看见希望。</p><p>自今日起，每天都要进步，学着定立日课</p><p>2018.09.26 日课内容：</p><ol><li>吉他练习30分钟。</li><li>学习一条git命令，使用git help [command]的方式。阅读《Git权威指南》共计一小时。</li><li>阅读《SQLite权威指南》 一个小时</li></ol><p>自己总结日课情况。</p><hr><p>吉他练习完成，但需要花时间熟悉五线谱。</p><p>阅读《Git权威指南》并未达标，学习一条git指令的效果并不好。</p><p>阅读《SQLite权威指南》 未完成</p><p>总得来讲，任务完成度低，由于自己做饭导致时间不充足。</p><p>明日日课，需要挤出两个半小时的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#昨日种种譬如昨日死，从后种种譬如今日生。&lt;/p&gt;
&lt;p&gt;今日读《曾国藩的正面与侧面2》有感，对其弟的包容与关爱超出常人，曾国荃率性冲动的性格多次犯错，曾国藩总是一边批评指出其错误，一边又宽慰让其不必过于郁郁而伤身，正如曾国藩给曾国荃引用袁了凡的那句话：昨日种种譬如昨日死，
      
    
    </summary>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>testAutoOpen</title>
    <link href="http://yoursite.com/2018/09/17/testAutoOpen-2/"/>
    <id>http://yoursite.com/2018/09/17/testAutoOpen-2/</id>
    <published>2018-09-17T02:19:05.000Z</published>
    <updated>2018-09-17T09:02:08.594Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="test3" scheme="http://yoursite.com/categories/test3/"/>
    
    
  </entry>
  
  <entry>
    <title>testAutoOpen</title>
    <link href="http://yoursite.com/2018/09/17/testAutoOpen-1/"/>
    <id>http://yoursite.com/2018/09/17/testAutoOpen-1/</id>
    <published>2018-09-17T02:17:18.000Z</published>
    <updated>2018-09-17T09:02:03.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大家好"><a href="#大家好" class="headerlink" title="大家好"></a>大家好</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大家好&quot;&gt;&lt;a href=&quot;#大家好&quot; class=&quot;headerlink&quot; title=&quot;大家好&quot;&gt;&lt;/a&gt;大家好&lt;/h1&gt;
      
    
    </summary>
    
      <category term="test2" scheme="http://yoursite.com/categories/test2/"/>
    
    
  </entry>
  
  <entry>
    <title>testAutoOpen</title>
    <link href="http://yoursite.com/2018/09/17/testAutoOpen/"/>
    <id>http://yoursite.com/2018/09/17/testAutoOpen/</id>
    <published>2018-09-17T02:16:27.000Z</published>
    <updated>2018-09-17T09:28:34.764Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="test2" scheme="http://yoursite.com/categories/test2/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>RAII（2018.09.14）</title>
    <link href="http://yoursite.com/2018/09/14/RAII(2018-09-14)/"/>
    <id>http://yoursite.com/2018/09/14/RAII(2018-09-14)/</id>
    <published>2018-09-14T11:26:27.000Z</published>
    <updated>2018-09-17T09:20:25.052Z</updated>
    
    <content type="html"><![CDATA[<p>#RAII(Resource Acquisition Is Initialization)</p><p>&emsp;&emsp;RAII是resource acquisition is initialization的缩写，意思就是“资源获取即初始化”。它是由C++之父Bjarne Stroustrup提出的一个设计理念，其核心思想就是将资源和对象的生命周期绑定，对象创建时获取资源，对象销毁则释放资源。在RAII的指导下，C++把底层的资源管理问题提升到了对对象生命周期管理的更高层次。</p><p>&emsp;&emsp;C++ RAII提现出了简洁、安全、实时的特点：</p><blockquote><ul><li>概念简洁性:让资源（包括内存和非内存资源）和对象的生命周期绑定，资源的设计者只需用在类定义内部处理资源问题，提高了程序的可维护性</li><li>类型安全性：通过资源代理对象包装资源（指针变量），并利用运算符重载提供指针运算方便使用，但对外暴露类型安全的接口</li><li>异常安全性：栈语义保证对象析构函数的调用，提高了程序的健壮性</li><li>释放实时性：和GC相比，RAII达到了和手动释放资源一样的实时性，因此可以承担底层开发的重任</li></ul></blockquote><p>&emsp;&emsp;至于C++ RAII的实现，往往会使用到C++的智能指针，关于智能指针的使用，这里只介绍<strong>auto_ptr</strong>的使用。</p><p>&emsp;&emsp;<strong>auto_ptr</strong>的使用注意事项：</p><blockquote><ol><li>auto_ptr不能共享所有权，资源所有权可以转移。</li><li>auto_ptr不能指向数组（为什么？）。</li><li>auto_ptr不能作为容器的成员（为什么？）。</li><li>不能通过复制操作来初始化auto_ptr<br>这是因为auto_ptr的构造函数被定义为了explicit</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">auto_ptr</span>&lt;<span class="keyword">int</span>&gt; p(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>));     <span class="comment">//OK</span></span><br><span class="line"><span class="built_in">std</span>::suto_ptr&lt;<span class="keyword">int</span>&gt; p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>);    <span class="comment">//ERROR</span></span><br><span class="line">```</span><br><span class="line">&amp;emsp;&amp;emsp;下面便是在C++ 中实现RAII的典型代码：</span><br><span class="line">```cpp</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">file(<span class="keyword">const</span> <span class="built_in">string</span>&amp; name)</span><br><span class="line">&#123;</span><br><span class="line">m_fileHandle = fopen(name.cstr());</span><br><span class="line">&#125;</span><br><span class="line">~file()</span><br><span class="line">&#123;</span><br><span class="line">fclose(m_fileHandle);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">handel m_fileHandle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面的代码为调用上面的类。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">file <span class="title">myFile</span><span class="params">(<span class="string">"my.txt"</span>)</span></span>;</span><br><span class="line"><span class="comment">//file operation</span></span><br><span class="line">&#125;<span class="comment">//此处销毁对象，释放资源</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;当函数结束时，局部对象myFile的生命周期也结束了，析构函数便会被调用，资源会得到释放。而且，如果函数中的代码抛出异常，那么析构函数也会被调用，资源同样会得到释放。所以，在RAII下，不仅仅资源安全，也是异常安全的。</p><p>&emsp;&emsp;但是，在下面的代码中资源是不安全的，尽管我们实现了RAII。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">file pFile = <span class="keyword">new</span> file(<span class="string">"my.txt"</span>);</span><br><span class="line"><span class="comment">// file operation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;由于这里在堆中创建了一个对象，但是却没有对其释放显示释放<strong>delete pFile</strong>，即便是加上这一句也不能保证程序的异常安全性，因为一旦发生异常该语句就有被忽略执行的风险。</p><p>&emsp;&emsp;所有在没有GC的情况下想要确保资源安全和异常安全，那么有必要使用智能指针。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">auto_ptr</span>&lt;file&gt; spFile(<span class="keyword">new</span> file(<span class="string">"my.txt"</span>));</span><br><span class="line"><span class="comment">//file operation</span></span><br><span class="line">&#125;<span class="comment">//此处，spFile结束生命周期的时候，会释放对象。</span></span><br></pre></td></tr></table></figure></p><p><em>**此处有一疑问：如果担心使用对象在离开函数体后不被释放的问题，为什么不在栈上创建对象？话说auto_ptr的使用方法是怎样的？</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#RAII(Resource Acquisition Is Initialization)&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;RAII是resource acquisition is initialization的缩写，意思就是“资源获取即初始化”。它是由C++之父Bj
      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2018.09.03</title>
    <link href="http://yoursite.com/2018/09/03/2018-09-03/"/>
    <id>http://yoursite.com/2018/09/03/2018-09-03/</id>
    <published>2018-09-03T11:26:27.000Z</published>
    <updated>2018-09-17T09:28:12.394Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="test1" scheme="http://yoursite.com/categories/test1/"/>
    
    
      <category term="C++11" scheme="http://yoursite.com/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>2345</title>
    <link href="http://yoursite.com/2018/09/02/2345/"/>
    <id>http://yoursite.com/2018/09/02/2345/</id>
    <published>2018-09-02T10:58:33.000Z</published>
    <updated>2018-09-17T09:25:25.318Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="test1" scheme="http://yoursite.com/categories/test1/"/>
    
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/02/123/"/>
    <id>http://yoursite.com/2018/09/02/123/</id>
    <published>2018-09-02T10:16:44.458Z</published>
    <updated>2018-09-17T09:28:07.947Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 123<br>date: 2018-09-02 18:16:44<br>categories: test1  </p><h2 id="tags-C-11"><a href="#tags-C-11" class="headerlink" title="tags: C++11"></a>tags: C++11</h2><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 123&lt;br&gt;date: 2018-09-02 18:16:44&lt;br&gt;categories: test1  &lt;/p&gt;
&lt;h2 id=&quot;tags-C-11&quot;&gt;&lt;a href=&quot;#tags-C-11&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/02/hello-world/"/>
    <id>http://yoursite.com/2018/09/02/hello-world/</id>
    <published>2018-09-02T04:55:26.146Z</published>
    <updated>2018-09-17T09:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
